AWSTemplateFormatVersion: 2010-09-09
Description: account-frontend
Parameters:
  VpcId:
    Type: String
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Default: vpc-e6e00183
  Subnets:
    Type: CommaDelimitedList
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    Default: subnet-cb91ae8d, subnet-a7b74ac2, subnet-179e8063
  Stack:
    Description: Applied directly as a tag
    Type: String
    Default: support
  Stage:
    Description: Applied directly as a tag
    Type: String
  App:
    Description: Applied directly as a tag
    Type: String
    Default: account-frontend
  ClientRavenDSN:
    Description: the DSN to use with sentry on the client
    Type: String
  ServerRavenDSN:
    Description: the DSN to use with sentry on the server
    Type: String
  AMI:
    Description: AMI ID
    Type: String
    Default: ami-5a747db0
  OfficeCIDR:
    Description: Office IP range
    Type: String
Conditions:
  CreateProdResources: !Equals [!Ref "Stage", "PROD"]
  CreateCodeResources: !Equals [!Ref "Stage", "CODE"]
Mappings:
  StageVariables:
    CODE:
      MaxInstances: 2
      MinInstances: 1
      InstanceType: t2.small
      CertificateARN: arn:aws:acm:eu-west-1:865473395570:certificate/e4c03b58-bf76-44c2-ae6a-17f81c10eb6f
      DomainEnvVariable: code.dev-theguardian.com
      SFCasesUrl: https://gm3ysthjh6.execute-api.eu-west-1.amazonaws.com/CODE
    PROD:
      MaxInstances: 6
      MinInstances: 3
      InstanceType: t2.small
      CertificateARN: arn:aws:acm:eu-west-1:865473395570:certificate/d2e4911c-c78d-469b-ab53-8c507aa41576
      DomainEnvVariable: theguardian.com
      SFCasesUrl: https://gm3ysthjh6.execute-api.eu-west-1.amazonaws.com/CODE # TODO update to PROD url
Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !FindInMap [ StageVariables, !Ref Stage, MinInstances ]
      MaxSize: !FindInMap [ StageVariables, !Ref Stage, MaxInstances ]
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Stack
          Value: !Ref Stack
          PropagateAtLaunch: true
        - Key: App
          Value: !Ref App
          PropagateAtLaunch: true
        - Key: Stage
          Value: !Ref Stage
          PropagateAtLaunch: true
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !FindInMap [ StageVariables, !Ref Stage, InstanceType ]
      IamInstanceProfile: !Ref InstanceProfile
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -ev

            # get and install node
            wget -nv https://nodejs.org/dist/v9.11.1/node-v9.11.1-linux-x64.tar.xz -P /tmp
            tar -xf /tmp/node-v9.11.1-linux-x64.tar.xz --directory /usr/local/

            # get runnable tar from S3
            aws --region ${AWS::Region} s3 cp s3://membership-dist/${Stack}/${Stage}/${App}/account-frontend.tgz /tmp
            mkdir /etc/gu
            tar -xvzf /tmp/account-frontend.tgz --directory /etc/gu/

            # add user
            groupadd account-frontend
            useradd -r -s /usr/bin/nologin -g account-frontend account-frontend
            chown -R account-frontend:account-frontend /etc/gu

            # write out systemd file
            cat >/etc/systemd/system/account-frontend.service <<EOL
            [Service]
            ExecStart=/usr/local/node-v9.11.1-linux-x64/bin/node /etc/gu/dist/server.js
            Restart=always
            StandardOutput=syslog
            StandardError=syslog
            SyslogIdentifier=account-frontend
            User=account-frontend
            Group=account-frontend
            Environment=NODE_ENV=production
            Environment=DOMAIN=${DomainEnvVariable}
            Environment=SF_CASES_URL=${SFCasesUrl}
            Environment=CLIENT_DSN=${ClientRavenDSN}
            Environment=SERVER_DSN=${ServerRavenDSN}
            [Install]
            WantedBy=multi-user.target
            EOL
            # RUN
            systemctl enable account-frontend
            systemctl start account-frontend

          -
            DomainEnvVariable: !FindInMap [ StageVariables, !Ref Stage, DomainEnvVariable ]
            SFCasesUrl: !FindInMap [ StageVariables, !Ref Stage, SFCasesUrl ]

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - !Sub arn:aws:iam::${AWS::AccountId}:policy/guardian-ec2-role-for-ssm
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: UpdateSSHKeys
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: arn:aws:s3:::github-public-keys/Membership-and-Subscriptions/*

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref AppRole

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Stack}-${Stage}-${App}
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App
        - Key: Stage
          Value: !Ref Stage

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: ElasticLoadBalancer
      Certificates:
        - CertificateArn: !FindInMap [ StageVariables, !Ref Stage, CertificateARN ]
      Port: 443
      Protocol: HTTPS

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Stack}-${Stage}-${App}
      Port: 9233
      Protocol: HTTP
      VpcId:
        Ref: VpcId
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /_healthcheck
      HealthCheckPort: 9233
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 45 # only connection drains for 45 seconds (rather than default of 300)
    DependsOn:
    - ElasticLoadBalancer

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit incoming HTTPS access on port 443, egress to port 9233
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 9233
          ToPort: 9233
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open up SSH access and enable HTTP access on the configured port
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref OfficeCIDR
        - IpProtocol: tcp
          FromPort: 9233
          ToPort: 9233
          CidrIp: !Ref OfficeCIDR
        - IpProtocol: tcp
          FromPort: 9233
          ToPort: 9233
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
