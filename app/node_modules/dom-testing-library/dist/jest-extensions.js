'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jestMatcherUtils = require('jest-matcher-utils');

var _matches = require('./matches');

function getDisplayName(subject) {
  if (subject && subject.constructor) {
    return subject.constructor.name;
  } else {
    return typeof subject;
  }
}

function checkHtmlElement(htmlElement) {
  if (!(htmlElement instanceof HTMLElement)) {
    throw new Error(`The given subject is a ${getDisplayName(htmlElement)}, not an HTMLElement`);
  }
}

function getMessage(matcher, expectedLabel, expectedValue, receivedLabel, receivedValue) {
  return [`${matcher}\n`, `${expectedLabel}:\n  ${(0, _jestMatcherUtils.EXPECTED_COLOR)(expectedValue)}`, `${receivedLabel}:\n  ${(0, _jestMatcherUtils.RECEIVED_COLOR)(receivedValue)}`].join('\n');
}

function printAttribute(name, value) {
  return value === undefined ? name : `${name}=${(0, _jestMatcherUtils.stringify)(value)}`;
}

function getAttributeComment(name, value) {
  return value === undefined ? `element.hasAttribute(${(0, _jestMatcherUtils.stringify)(name)})` : `element.getAttribute(${(0, _jestMatcherUtils.stringify)(name)}) === ${(0, _jestMatcherUtils.stringify)(value)}`;
}

function splitClassNames(str) {
  if (!str) {
    return [];
  }
  return str.split(/\s+/).filter(function (s) {
    return s.length > 0;
  });
}

function isSubset(subset, superset) {
  return subset.every(function (item) {
    return superset.includes(item);
  });
}

var extensions = {
  toBeInTheDOM(received) {
    var _this = this;

    if (received) {
      checkHtmlElement(received);
    }
    return {
      pass: !!received,
      message: function message() {
        var to = _this.isNot ? 'not to' : 'to';
        return getMessage((0, _jestMatcherUtils.matcherHint)(`${_this.isNot ? '.not' : ''}.toBeInTheDOM`, 'element', ''), 'Expected', `element ${to} be present`, 'Received', received);
      }
    };
  },

  toHaveTextContent(htmlElement, checkWith) {
    var _this2 = this;

    checkHtmlElement(htmlElement);
    var textContent = htmlElement.textContent;
    return {
      pass: (0, _matches.matches)(textContent, htmlElement, checkWith),
      message: function message() {
        var to = _this2.isNot ? 'not to' : 'to';
        return getMessage((0, _jestMatcherUtils.matcherHint)(`${_this2.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), `Expected element ${to} have text content`, checkWith, 'Received', textContent);
      }
    };
  },

  toHaveAttribute(htmlElement, name, expectedValue) {
    var _this3 = this;

    checkHtmlElement(htmlElement);
    var isExpectedValuePresent = expectedValue !== undefined;
    var hasAttribute = htmlElement.hasAttribute(name);
    var receivedValue = htmlElement.getAttribute(name);
    return {
      pass: isExpectedValuePresent ? hasAttribute && receivedValue === expectedValue : hasAttribute,
      message: function message() {
        var to = _this3.isNot ? 'not to' : 'to';
        var receivedAttribute = hasAttribute ? printAttribute(name, receivedValue) : null;
        var matcher = (0, _jestMatcherUtils.matcherHint)(`${_this3.isNot ? '.not' : ''}.toHaveAttribute`, 'element', (0, _jestMatcherUtils.printExpected)(name), {
          secondArgument: isExpectedValuePresent ? (0, _jestMatcherUtils.printExpected)(expectedValue) : undefined,
          comment: getAttributeComment(name, expectedValue)
        });
        return getMessage(matcher, `Expected the element ${to} have attribute`, printAttribute(name, expectedValue), 'Received', receivedAttribute);
      }
    };
  },

  toHaveClass(htmlElement, expectedClassNames) {
    var _this4 = this;

    checkHtmlElement(htmlElement);
    var received = splitClassNames(htmlElement.getAttribute('class'));
    var expected = splitClassNames(expectedClassNames);
    return {
      pass: isSubset(expected, received),
      message: function message() {
        var to = _this4.isNot ? 'not to' : 'to';
        return getMessage((0, _jestMatcherUtils.matcherHint)(`${_this4.isNot ? '.not' : ''}.toHaveClass`, 'element', (0, _jestMatcherUtils.printExpected)(expected.join(' '))), `Expected the element ${to} have class`, expected.join(' '), 'Received', received.join(' '));
      }
    };
  }
};

exports.default = extensions;