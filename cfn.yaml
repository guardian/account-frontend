AWSTemplateFormatVersion: 2010-09-09
Description: manage-frontend
Parameters:
  VpcId:
    Type: String
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Default: vpc-e6e00183
  PrivateVpcSubnets:
    Description: Private subnets to use for EC2 instances
    Type: List<AWS::EC2::Subnet::Id>
  PublicVpcSubnets:
    Description: Public subnets to use for the ELB
    Type: List<AWS::EC2::Subnet::Id>
  Stack:
    Description: Applied directly as a tag
    Type: String
    Default: support
  Stage:
    Description: Applied directly as a tag
    Type: String
  App:
    Description: Applied directly as a tag
    Type: String
    Default: manage-frontend
  ClientRavenDSN:
    Description: the DSN to use with sentry on the client
    Type: String
  ServerRavenDSN:
    Description: the DSN to use with sentry on the server
    Type: String
  AMI:
    Description: AMI ID
    Type: String
    Default: ami-88a6af62
  BastionSecurityGroup:
    Description: Bastion's security group for SSH
    Type: String
Conditions:
  CreateProdResources: !Equals [!Ref "Stage", "PROD"]
  CreateCodeResources: !Equals [!Ref "Stage", "CODE"]
Mappings:
  StageVariables:
    CODE:
      MaxInstances: 2
      MinInstances: 1
      InstanceType: t3.small
      CertificateARN: arn:aws:acm:eu-west-1:865473395570:certificate/2c2a72a2-a0d6-4ffa-b8a1-8a7916000515
      ApiDomainEnvVariable: code.dev-guardianapis.com
      DomainEnvVariable: code.dev-theguardian.com
      SFCasesUrl: https://gm3ysthjh6.execute-api.eu-west-1.amazonaws.com/CODE
    PROD:
      MaxInstances: 6
      MinInstances: 3
      InstanceType: t3.small
      CertificateARN: arn:aws:acm:eu-west-1:865473395570:certificate/d2e4911c-c78d-469b-ab53-8c507aa41576
      ApiDomainEnvVariable: guardianapis.com
      DomainEnvVariable: theguardian.com
      SFCasesUrl: https://lmjfwuvr5l.execute-api.eu-west-1.amazonaws.com/PROD
Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateVpcSubnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !FindInMap [ StageVariables, !Ref Stage, MinInstances ]
      MaxSize: !FindInMap [ StageVariables, !Ref Stage, MaxInstances ]
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Stack
          Value: !Ref Stack
          PropagateAtLaunch: true
        - Key: App
          Value: !Ref App
          PropagateAtLaunch: true
        - Key: Stage
          Value: !Ref Stage
          PropagateAtLaunch: true
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !FindInMap [ StageVariables, !Ref Stage, InstanceType ]
      IamInstanceProfile: !Ref InstanceProfile
      AssociatePublicIpAddress: false
      UserData:
        Fn::Base64: !Sub
          - |+
            #!/bin/bash -ev

            # get runnable tar from S3
            aws --region ${AWS::Region} s3 cp s3://membership-dist/${Stack}/${Stage}/${App}/manage-frontend.tgz /tmp
            mkdir /etc/gu
            tar -xvzf /tmp/manage-frontend.tgz --directory /etc/gu/

            # add user
            groupadd manage-frontend
            useradd -r -s /usr/bin/nologin -g manage-frontend manage-frontend
            touch /var/log/manage-frontend.log
            chown -R manage-frontend:manage-frontend /etc/gu
            chown manage-frontend:manage-frontend /var/log/manage-frontend.log

            # write out systemd file
            cat >/etc/systemd/system/manage-frontend.service <<EOL
            [Service]
            ExecStart=/usr/bin/node /etc/gu/dist/server.js
            Restart=always
            StandardOutput=syslog
            StandardError=syslog
            SyslogIdentifier=manage-frontend
            User=manage-frontend
            Group=manage-frontend
            Environment=NODE_ENV=production
            Environment=STAGE=${Stage}
            Environment=DOMAIN=${DomainEnvVariable}
            Environment=API_DOMAIN=${ApiDomainEnvVariable}
            Environment=SF_CASES_URL=${SFCasesUrl}
            Environment=CLIENT_DSN=${ClientRavenDSN}
            Environment=SERVER_DSN=${ServerRavenDSN}
            [Install]
            WantedBy=multi-user.target
            EOL
            # RUN
            systemctl enable manage-frontend
            systemctl start manage-frontend
            /opt/cloudwatch-logs/configure-logs application ${Stack} ${Stage} ${App} /var/log/manage-frontend.log

          - DomainEnvVariable: !FindInMap [ StageVariables, !Ref Stage, DomainEnvVariable ]
            ApiDomainEnvVariable: !FindInMap [ StageVariables, !Ref Stage, ApiDomainEnvVariable ]
            SFCasesUrl: !FindInMap [ StageVariables, !Ref Stage, SFCasesUrl ]

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - !Sub arn:aws:iam::${AWS::AccountId}:policy/guardian-ec2-role-for-ssm
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PushLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: !GetAtt ManageFrontendLogGroup.Arn
        - PolicyName: ReadPrivateCredentials
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: s3:GetObject
              Resource: !Sub arn:aws:s3:::gu-reader-revenue-private/manage-frontend/${Stage}/*

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref AppRole

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Stack}-${Stage}-${App}
      Subnets: !Ref PublicVpcSubnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App
        - Key: Stage
          Value: !Ref Stage

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: ElasticLoadBalancer
      Certificates:
        - CertificateArn: !FindInMap [ StageVariables, !Ref Stage, CertificateARN ]
      Port: 443
      Protocol: HTTPS

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Stack}-${Stage}-${App}
      Port: 9233
      Protocol: HTTP
      VpcId:
        Ref: VpcId
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /_healthcheck
      HealthCheckPort: 9233
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 45 # only connection drains for 45 seconds (rather than default of 300)
    DependsOn:
    - ElasticLoadBalancer

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit incoming HTTPS access on port 443, egress to port 9233
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 9233
          ToPort: 9233
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open up SSH access and enable HTTP access on the configured port
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
        - IpProtocol: tcp
          FromPort: 9233
          ToPort: 9233
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ManageFrontendLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub support-manage-frontend-${Stage}
      RetentionInDays: 14

  NoHealthyInstancesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProdResources
    Properties:
      AlarmActions:
      - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:fulfilment-dev
      AlarmName: !Sub No healthy instances for manage-frontend in ${Stage}
      MetricName: HealthyHostCount
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ElasticLoadBalancer.LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
      ComparisonOperator: LessThanOrEqualToThreshold
      Threshold: 0.5
      Period: 60
      EvaluationPeriods: 2
      Statistic: Average
    DependsOn:
      - TargetGroup
      - ElasticLoadBalancer

  High5XXRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProdResources
    Properties:
      AlarmActions:
      - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:fulfilment-dev
      AlarmName: !Sub High 5XX rate for manage-frontend in ${Stage}
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ElasticLoadBalancer.LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 3
      Period: 60
      EvaluationPeriods: 2
      Statistic: Sum
      TreatMissingData: notBreaching
    DependsOn:
    - TargetGroup
    - ElasticLoadBalancer
