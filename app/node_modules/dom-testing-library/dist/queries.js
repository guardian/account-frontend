'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getByTestId = exports.queryByTestId = exports.getByAltText = exports.queryByAltText = exports.getByLabelText = exports.queryByLabelText = exports.getByText = exports.queryByText = exports.getByPlaceholderText = exports.queryByPlaceholderText = undefined;

var _matches = require('./matches');

// Here are the queries for the library.
// The queries here should only be things that are accessible to both users who are using a screen reader
// and those who are not using a screen reader (with the exception of the data-testid attribute query).

function queryLabelByText(container, text) {
  return Array.from(container.querySelectorAll('label')).find(function (label) {
    return (0, _matches.matches)(label.textContent, label, text);
  }) || null;
}

function queryByLabelText(container, text) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$selector = _ref.selector,
      selector = _ref$selector === undefined ? '*' : _ref$selector;

  var label = queryLabelByText(container, text);
  if (!label) {
    return queryByAttribute('aria-label', container, text);
  }
  /* istanbul ignore if */
  if (label.control) {
    // appears to be unsupported in jsdom: https://github.com/jsdom/jsdom/issues/2175
    // but this would be the proper way to do things
    return label.control;
  } else if (label.getAttribute('for')) {
    // <label for="someId">text</label><input id="someId" />
    return container.querySelector(`#${label.getAttribute('for')}`);
  } else if (label.getAttribute('id')) {
    // <label id="someId">text</label><input aria-labelledby="someId" />
    return container.querySelector(`[aria-labelledby="${label.getAttribute('id')}"]`);
  } else if (label.childNodes.length) {
    // <label>text: <input /></label>
    return label.querySelector(selector);
  } else {
    return null;
  }
}

function queryByText(container, text) {
  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref2$selector = _ref2.selector,
      selector = _ref2$selector === undefined ? '*' : _ref2$selector;

  return Array.from(container.querySelectorAll(selector)).find(function (node) {
    return (0, _matches.matches)(getText(node), node, text);
  }) || null;
}

// this is just a utility and not an exposed query.
// There are no plans to expose this.
function queryByAttribute(attribute, container, text) {
  return Array.from(container.querySelectorAll(`[${attribute}]`)).find(function (node) {
    return (0, _matches.matches)(node.getAttribute(attribute), node, text);
  }) || null;
}

var queryByPlaceholderText = queryByAttribute.bind(null, 'placeholder');
var queryByTestId = queryByAttribute.bind(null, 'data-testid');

// this is just a utility and not an exposed query.
// There are no plans to expose this.
function getText(node) {
  return Array.from(node.childNodes).filter(function (child) {
    return child.nodeType === Node.TEXT_NODE && Boolean(child.textContent);
  }).map(function (c) {
    return c.textContent;
  }).join(' ');
}

// getters
// the reason we're not dynamically generating these functions that look so similar:
// 1. The error messages are specific to each one and depend on arguments
// 2. The stack trace will look better because it'll have a helpful method name.

function getByTestId(container, id) {
  for (var _len = arguments.length, rest = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    rest[_key - 2] = arguments[_key];
  }

  var el = queryByTestId.apply(undefined, [container, id].concat(rest));
  if (!el) {
    throw new Error(`Unable to find an element by: [data-testid="${id}"]`);
  }
  return el;
}

function getByPlaceholderText(container, text) {
  for (var _len2 = arguments.length, rest = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    rest[_key2 - 2] = arguments[_key2];
  }

  var el = queryByPlaceholderText.apply(undefined, [container, text].concat(rest));
  if (!el) {
    throw new Error(`Unable to find an element with the placeholder text of: ${text}`);
  }
  return el;
}

function getByLabelText(container, text) {
  for (var _len3 = arguments.length, rest = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
    rest[_key3 - 2] = arguments[_key3];
  }

  var el = queryByLabelText.apply(undefined, [container, text].concat(rest));
  if (!el) {
    var label = queryLabelByText(container, text);
    if (label) {
      throw new Error(`Found a label with the text of: ${text}, however no form control was found associated to that label. Make sure you're using the "for" attribute or "aria-labelledby" attribute correctly.`);
    } else {
      throw new Error(`Unable to find a label with the text of: ${text}`);
    }
  }
  return el;
}

function getByText(container, text) {
  for (var _len4 = arguments.length, rest = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
    rest[_key4 - 2] = arguments[_key4];
  }

  var el = queryByText.apply(undefined, [container, text].concat(rest));
  if (!el) {
    throw new Error(`Unable to find an element with the text: ${text}. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.`);
  }
  return el;
}

function queryByAltText(container, alt) {
  return Array.from(container.querySelectorAll('img,input,area')).find(function (node) {
    return (0, _matches.matches)(node.getAttribute('alt'), node, alt);
  }) || null;
}

function getByAltText(container, alt) {
  var el = queryByAltText(container, alt);
  if (!el) {
    throw new Error(`Unable to find an element with the alt text: ${alt}`);
  }
  return el;
}

exports.queryByPlaceholderText = queryByPlaceholderText;
exports.getByPlaceholderText = getByPlaceholderText;
exports.queryByText = queryByText;
exports.getByText = getByText;
exports.queryByLabelText = queryByLabelText;
exports.getByLabelText = getByLabelText;
exports.queryByAltText = queryByAltText;
exports.getByAltText = getByAltText;
exports.queryByTestId = queryByTestId;
exports.getByTestId = getByTestId;

/* eslint complexity:["error", 14] */